# coding: utf-8

"""
    ESCO REST API Docs

    The ESCO REST API exposes ESCO as a simple, RESTful API.<br /><br /> <a href=\"esco-api-openapi-v3.yml\">Open API v3 definition</a>  # noqa: E501

    OpenAPI spec version: 1.0.12
    Contact: EMPL-ESCO-SECRETARIAT@ec.europa.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.hal_object import HalObject  # noqa: F401,E501

class Resources(HalObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'language': 'str',
        'concepts': 'list[ResourcesConcepts]',
        'offset': 'int',
        'total': 'int',
        'links': 'ResourcesLinks'
    }
    if hasattr(HalObject, "swagger_types"):
        swagger_types.update(HalObject.swagger_types)

    attribute_map = {
        'count': 'count',
        'language': 'language',
        'concepts': 'concepts',
        'offset': 'offset',
        'total': 'total',
        'links': '_links'
    }
    if hasattr(HalObject, "attribute_map"):
        attribute_map.update(HalObject.attribute_map)

    def __init__(self, count=0, language=None, concepts=None, offset=0, total=None, links=None, *args, **kwargs):  # noqa: E501
        """Resources - a model defined in Swagger"""  # noqa: E501
        self._count = None
        self._language = None
        self._concepts = None
        self._offset = None
        self._total = None
        self._links = None
        self.discriminator = None
        self.count = count
        self.language = language
        if concepts is not None:
            self.concepts = concepts
        if offset is not None:
            self.offset = offset
        if total is not None:
            self.total = total
        if links is not None:
            self.links = links
        HalObject.__init__(self, *args, **kwargs)

    @property
    def count(self):
        """Gets the count of this Resources.  # noqa: E501

        The number of resources returned in this collection as _embedded objects.  # noqa: E501

        :return: The count of this Resources.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Resources.

        The number of resources returned in this collection as _embedded objects.  # noqa: E501

        :param count: The count of this Resources.  # noqa: E501
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def language(self):
        """Gets the language of this Resources.  # noqa: E501

        The default language of the response.  # noqa: E501

        :return: The language of this Resources.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Resources.

        The default language of the response.  # noqa: E501

        :param language: The language of this Resources.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def concepts(self):
        """Gets the concepts of this Resources.  # noqa: E501

        The main information about resources returned in this collection, detailed information is available in the _embedded map section by the resource URI as a key.  # noqa: E501

        :return: The concepts of this Resources.  # noqa: E501
        :rtype: list[ResourcesConcepts]
        """
        return self._concepts

    @concepts.setter
    def concepts(self, concepts):
        """Sets the concepts of this Resources.

        The main information about resources returned in this collection, detailed information is available in the _embedded map section by the resource URI as a key.  # noqa: E501

        :param concepts: The concepts of this Resources.  # noqa: E501
        :type: list[ResourcesConcepts]
        """

        self._concepts = concepts

    @property
    def offset(self):
        """Gets the offset of this Resources.  # noqa: E501

        The offset of the returned resources. (zero-based numbering)  # noqa: E501

        :return: The offset of this Resources.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Resources.

        The offset of the returned resources. (zero-based numbering)  # noqa: E501

        :param offset: The offset of this Resources.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def total(self):
        """Gets the total of this Resources.  # noqa: E501

        The total number of all available resources regardless the pagination.  # noqa: E501

        :return: The total of this Resources.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Resources.

        The total number of all available resources regardless the pagination.  # noqa: E501

        :param total: The total of this Resources.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def links(self):
        """Gets the links of this Resources.  # noqa: E501


        :return: The links of this Resources.  # noqa: E501
        :rtype: ResourcesLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Resources.


        :param links: The links of this Resources.  # noqa: E501
        :type: ResourcesLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Resources, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Resources):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
