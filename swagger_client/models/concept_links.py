# coding: utf-8

"""
    ESCO REST API Docs

    The ESCO REST API exposes ESCO as a simple, RESTful API.<br /><br /> <a href=\"esco-api-openapi-v3.yml\">Open API v3 definition</a>  # noqa: E501

    OpenAPI spec version: 1.0.12
    Contact: EMPL-ESCO-SECRETARIAT@ec.europa.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConceptLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'broader_skill': 'list[Link]',
        'narrower_skill': 'list[Link]',
        'broader_occupation': 'list[Link]',
        'narrower_occupation': 'list[Link]'
    }

    attribute_map = {
        'broader_skill': 'broaderSkill',
        'narrower_skill': 'narrowerSkill',
        'broader_occupation': 'broaderOccupation',
        'narrower_occupation': 'narrowerOccupation'
    }

    def __init__(self, broader_skill=None, narrower_skill=None, broader_occupation=None, narrower_occupation=None):  # noqa: E501
        """ConceptLinks - a model defined in Swagger"""  # noqa: E501
        self._broader_skill = None
        self._narrower_skill = None
        self._broader_occupation = None
        self._narrower_occupation = None
        self.discriminator = None
        if broader_skill is not None:
            self.broader_skill = broader_skill
        if narrower_skill is not None:
            self.narrower_skill = narrower_skill
        if broader_occupation is not None:
            self.broader_occupation = broader_occupation
        if narrower_occupation is not None:
            self.narrower_occupation = narrower_occupation

    @property
    def broader_skill(self):
        """Gets the broader_skill of this ConceptLinks.  # noqa: E501

        A broader related skill. The value of this field is an array containing Links to broader Skill resources.  # noqa: E501

        :return: The broader_skill of this ConceptLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._broader_skill

    @broader_skill.setter
    def broader_skill(self, broader_skill):
        """Sets the broader_skill of this ConceptLinks.

        A broader related skill. The value of this field is an array containing Links to broader Skill resources.  # noqa: E501

        :param broader_skill: The broader_skill of this ConceptLinks.  # noqa: E501
        :type: list[Link]
        """

        self._broader_skill = broader_skill

    @property
    def narrower_skill(self):
        """Gets the narrower_skill of this ConceptLinks.  # noqa: E501

        A narrower related skill. The value of this field is an array containing Links to narrower Skill resources.  # noqa: E501

        :return: The narrower_skill of this ConceptLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._narrower_skill

    @narrower_skill.setter
    def narrower_skill(self, narrower_skill):
        """Sets the narrower_skill of this ConceptLinks.

        A narrower related skill. The value of this field is an array containing Links to narrower Skill resources.  # noqa: E501

        :param narrower_skill: The narrower_skill of this ConceptLinks.  # noqa: E501
        :type: list[Link]
        """

        self._narrower_skill = narrower_skill

    @property
    def broader_occupation(self):
        """Gets the broader_occupation of this ConceptLinks.  # noqa: E501

        A broader related occupation. The value of this field is an array containing Links to broader Occupation resources.  # noqa: E501

        :return: The broader_occupation of this ConceptLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._broader_occupation

    @broader_occupation.setter
    def broader_occupation(self, broader_occupation):
        """Sets the broader_occupation of this ConceptLinks.

        A broader related occupation. The value of this field is an array containing Links to broader Occupation resources.  # noqa: E501

        :param broader_occupation: The broader_occupation of this ConceptLinks.  # noqa: E501
        :type: list[Link]
        """

        self._broader_occupation = broader_occupation

    @property
    def narrower_occupation(self):
        """Gets the narrower_occupation of this ConceptLinks.  # noqa: E501

        A narrower related occupation. The value of this field is an array containing Links to narrower Occupation resources.  # noqa: E501

        :return: The narrower_occupation of this ConceptLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._narrower_occupation

    @narrower_occupation.setter
    def narrower_occupation(self, narrower_occupation):
        """Sets the narrower_occupation of this ConceptLinks.

        A narrower related occupation. The value of this field is an array containing Links to narrower Occupation resources.  # noqa: E501

        :param narrower_occupation: The narrower_occupation of this ConceptLinks.  # noqa: E501
        :type: list[Link]
        """

        self._narrower_occupation = narrower_occupation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConceptLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConceptLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
