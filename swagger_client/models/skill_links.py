# coding: utf-8

"""
    ESCO REST API Docs

    The ESCO REST API exposes ESCO as a simple, RESTful API.<br /><br /> <a href=\"esco-api-openapi-v3.yml\">Open API v3 definition</a>  # noqa: E501

    OpenAPI spec version: 1.0.12
    Contact: EMPL-ESCO-SECRETARIAT@ec.europa.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SkillLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_skill_type': 'list[Link]',
        'has_reuse_level': 'list[Link]',
        'broader_skill_group': 'list[Link]',
        'broader_hierarchy_concept': 'list[Link]',
        'broader_skill': 'list[Link]',
        'narrower_skill': 'list[Link]',
        'is_essential_for_occupation': 'list[Link]',
        'is_optional_for_occupation': 'list[Link]',
        'is_essential_for_skill': 'list[Link]',
        'is_optional_for_skill': 'list[Link]'
    }

    attribute_map = {
        'has_skill_type': 'hasSkillType',
        'has_reuse_level': 'hasReuseLevel',
        'broader_skill_group': 'broaderSkillGroup',
        'broader_hierarchy_concept': 'broaderHierarchyConcept',
        'broader_skill': 'broaderSkill',
        'narrower_skill': 'narrowerSkill',
        'is_essential_for_occupation': 'isEssentialForOccupation',
        'is_optional_for_occupation': 'isOptionalForOccupation',
        'is_essential_for_skill': 'isEssentialForSkill',
        'is_optional_for_skill': 'isOptionalForSkill'
    }

    def __init__(self, has_skill_type=None, has_reuse_level=None, broader_skill_group=None, broader_hierarchy_concept=None, broader_skill=None, narrower_skill=None, is_essential_for_occupation=None, is_optional_for_occupation=None, is_essential_for_skill=None, is_optional_for_skill=None):  # noqa: E501
        """SkillLinks - a model defined in Swagger"""  # noqa: E501
        self._has_skill_type = None
        self._has_reuse_level = None
        self._broader_skill_group = None
        self._broader_hierarchy_concept = None
        self._broader_skill = None
        self._narrower_skill = None
        self._is_essential_for_occupation = None
        self._is_optional_for_occupation = None
        self._is_essential_for_skill = None
        self._is_optional_for_skill = None
        self.discriminator = None
        if has_skill_type is not None:
            self.has_skill_type = has_skill_type
        if has_reuse_level is not None:
            self.has_reuse_level = has_reuse_level
        if broader_skill_group is not None:
            self.broader_skill_group = broader_skill_group
        if broader_hierarchy_concept is not None:
            self.broader_hierarchy_concept = broader_hierarchy_concept
        if broader_skill is not None:
            self.broader_skill = broader_skill
        if narrower_skill is not None:
            self.narrower_skill = narrower_skill
        if is_essential_for_occupation is not None:
            self.is_essential_for_occupation = is_essential_for_occupation
        if is_optional_for_occupation is not None:
            self.is_optional_for_occupation = is_optional_for_occupation
        if is_essential_for_skill is not None:
            self.is_essential_for_skill = is_essential_for_skill
        if is_optional_for_skill is not None:
            self.is_optional_for_skill = is_optional_for_skill

    @property
    def has_skill_type(self):
        """Gets the has_skill_type of this SkillLinks.  # noqa: E501

        A concept representing the skill type. The value of this field is a Link to the relevant Concept resource.  # noqa: E501

        :return: The has_skill_type of this SkillLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._has_skill_type

    @has_skill_type.setter
    def has_skill_type(self, has_skill_type):
        """Sets the has_skill_type of this SkillLinks.

        A concept representing the skill type. The value of this field is a Link to the relevant Concept resource.  # noqa: E501

        :param has_skill_type: The has_skill_type of this SkillLinks.  # noqa: E501
        :type: list[Link]
        """

        self._has_skill_type = has_skill_type

    @property
    def has_reuse_level(self):
        """Gets the has_reuse_level of this SkillLinks.  # noqa: E501

        A concept representing the skill reuse level. The value of this field is a Link to the relevant Concept resource.  # noqa: E501

        :return: The has_reuse_level of this SkillLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._has_reuse_level

    @has_reuse_level.setter
    def has_reuse_level(self, has_reuse_level):
        """Sets the has_reuse_level of this SkillLinks.

        A concept representing the skill reuse level. The value of this field is a Link to the relevant Concept resource.  # noqa: E501

        :param has_reuse_level: The has_reuse_level of this SkillLinks.  # noqa: E501
        :type: list[Link]
        """

        self._has_reuse_level = has_reuse_level

    @property
    def broader_skill_group(self):
        """Gets the broader_skill_group of this SkillLinks.  # noqa: E501

        A broader related skill group. The value of this field is an array containing Links to broader Concept resources.  # noqa: E501

        :return: The broader_skill_group of this SkillLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._broader_skill_group

    @broader_skill_group.setter
    def broader_skill_group(self, broader_skill_group):
        """Sets the broader_skill_group of this SkillLinks.

        A broader related skill group. The value of this field is an array containing Links to broader Concept resources.  # noqa: E501

        :param broader_skill_group: The broader_skill_group of this SkillLinks.  # noqa: E501
        :type: list[Link]
        """

        self._broader_skill_group = broader_skill_group

    @property
    def broader_hierarchy_concept(self):
        """Gets the broader_hierarchy_concept of this SkillLinks.  # noqa: E501

        The broader related skill hierarchy concept. The value of this field is an array containing Links to broader Concept resources.  # noqa: E501

        :return: The broader_hierarchy_concept of this SkillLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._broader_hierarchy_concept

    @broader_hierarchy_concept.setter
    def broader_hierarchy_concept(self, broader_hierarchy_concept):
        """Sets the broader_hierarchy_concept of this SkillLinks.

        The broader related skill hierarchy concept. The value of this field is an array containing Links to broader Concept resources.  # noqa: E501

        :param broader_hierarchy_concept: The broader_hierarchy_concept of this SkillLinks.  # noqa: E501
        :type: list[Link]
        """

        self._broader_hierarchy_concept = broader_hierarchy_concept

    @property
    def broader_skill(self):
        """Gets the broader_skill of this SkillLinks.  # noqa: E501

        A broader related skill. The value of this field is an array containing Links to broader Skill resources.  # noqa: E501

        :return: The broader_skill of this SkillLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._broader_skill

    @broader_skill.setter
    def broader_skill(self, broader_skill):
        """Sets the broader_skill of this SkillLinks.

        A broader related skill. The value of this field is an array containing Links to broader Skill resources.  # noqa: E501

        :param broader_skill: The broader_skill of this SkillLinks.  # noqa: E501
        :type: list[Link]
        """

        self._broader_skill = broader_skill

    @property
    def narrower_skill(self):
        """Gets the narrower_skill of this SkillLinks.  # noqa: E501

        A narrower related skill. The value of this field is an array containing Links to narrower Skill resources.  # noqa: E501

        :return: The narrower_skill of this SkillLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._narrower_skill

    @narrower_skill.setter
    def narrower_skill(self, narrower_skill):
        """Sets the narrower_skill of this SkillLinks.

        A narrower related skill. The value of this field is an array containing Links to narrower Skill resources.  # noqa: E501

        :param narrower_skill: The narrower_skill of this SkillLinks.  # noqa: E501
        :type: list[Link]
        """

        self._narrower_skill = narrower_skill

    @property
    def is_essential_for_occupation(self):
        """Gets the is_essential_for_occupation of this SkillLinks.  # noqa: E501

        An occupation with this skill as essential. The value of this field is an array containing Links to essential Occupation resources.  # noqa: E501

        :return: The is_essential_for_occupation of this SkillLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._is_essential_for_occupation

    @is_essential_for_occupation.setter
    def is_essential_for_occupation(self, is_essential_for_occupation):
        """Sets the is_essential_for_occupation of this SkillLinks.

        An occupation with this skill as essential. The value of this field is an array containing Links to essential Occupation resources.  # noqa: E501

        :param is_essential_for_occupation: The is_essential_for_occupation of this SkillLinks.  # noqa: E501
        :type: list[Link]
        """

        self._is_essential_for_occupation = is_essential_for_occupation

    @property
    def is_optional_for_occupation(self):
        """Gets the is_optional_for_occupation of this SkillLinks.  # noqa: E501

        An occupation with this skill as optional. The value of this field is an array containing Links to optional Occupation resources.  # noqa: E501

        :return: The is_optional_for_occupation of this SkillLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._is_optional_for_occupation

    @is_optional_for_occupation.setter
    def is_optional_for_occupation(self, is_optional_for_occupation):
        """Sets the is_optional_for_occupation of this SkillLinks.

        An occupation with this skill as optional. The value of this field is an array containing Links to optional Occupation resources.  # noqa: E501

        :param is_optional_for_occupation: The is_optional_for_occupation of this SkillLinks.  # noqa: E501
        :type: list[Link]
        """

        self._is_optional_for_occupation = is_optional_for_occupation

    @property
    def is_essential_for_skill(self):
        """Gets the is_essential_for_skill of this SkillLinks.  # noqa: E501

        A skill with this skill as essential. The value of this field is an array containing Links to essential Skill resources.  # noqa: E501

        :return: The is_essential_for_skill of this SkillLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._is_essential_for_skill

    @is_essential_for_skill.setter
    def is_essential_for_skill(self, is_essential_for_skill):
        """Sets the is_essential_for_skill of this SkillLinks.

        A skill with this skill as essential. The value of this field is an array containing Links to essential Skill resources.  # noqa: E501

        :param is_essential_for_skill: The is_essential_for_skill of this SkillLinks.  # noqa: E501
        :type: list[Link]
        """

        self._is_essential_for_skill = is_essential_for_skill

    @property
    def is_optional_for_skill(self):
        """Gets the is_optional_for_skill of this SkillLinks.  # noqa: E501

        A skill with this skill as optional. The value of this field is an array containing Links to optional Skill resources.  # noqa: E501

        :return: The is_optional_for_skill of this SkillLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._is_optional_for_skill

    @is_optional_for_skill.setter
    def is_optional_for_skill(self, is_optional_for_skill):
        """Sets the is_optional_for_skill of this SkillLinks.

        A skill with this skill as optional. The value of this field is an array containing Links to optional Skill resources.  # noqa: E501

        :param is_optional_for_skill: The is_optional_for_skill of this SkillLinks.  # noqa: E501
        :type: list[Link]
        """

        self._is_optional_for_skill = is_optional_for_skill

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SkillLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SkillLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
