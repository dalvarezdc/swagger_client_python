# coding: utf-8

"""
    ESCO REST API Docs

    The ESCO REST API exposes ESCO as a simple, RESTful API.<br /><br /> <a href=\"esco-api-openapi-v3.yml\">Open API v3 definition</a>  # noqa: E501

    OpenAPI spec version: 1.0.12
    Contact: EMPL-ESCO-SECRETARIAT@ec.europa.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.hal_object import HalObject  # noqa: F401,E501

class SuggestionResult(HalObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'int',
        'offset': 'int',
        'limit': 'int',
        'text': 'str',
        'language': 'str',
        'type': 'list[str]',
        'is_in_scheme': 'list[str]',
        'facet': 'list[str]',
        'links': 'SuggestionResultLinks',
        'embedded': 'SuggestionResultEmbedded'
    }
    if hasattr(HalObject, "swagger_types"):
        swagger_types.update(HalObject.swagger_types)

    attribute_map = {
        'total': 'total',
        'offset': 'offset',
        'limit': 'limit',
        'text': 'text',
        'language': 'language',
        'type': 'type',
        'is_in_scheme': 'isInScheme',
        'facet': 'facet',
        'links': '_links',
        'embedded': '_embedded'
    }
    if hasattr(HalObject, "attribute_map"):
        attribute_map.update(HalObject.attribute_map)

    def __init__(self, total=None, offset=0, limit=None, text=None, language=None, type=None, is_in_scheme=None, facet=None, links=None, embedded=None, *args, **kwargs):  # noqa: E501
        """SuggestionResult - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._offset = None
        self._limit = None
        self._text = None
        self._language = None
        self._type = None
        self._is_in_scheme = None
        self._facet = None
        self._links = None
        self._embedded = None
        self.discriminator = None
        self.total = total
        if offset is not None:
            self.offset = offset
        if limit is not None:
            self.limit = limit
        if text is not None:
            self.text = text
        self.language = language
        if type is not None:
            self.type = type
        if is_in_scheme is not None:
            self.is_in_scheme = is_in_scheme
        if facet is not None:
            self.facet = facet
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded
        HalObject.__init__(self, *args, **kwargs)

    @property
    def total(self):
        """Gets the total of this SuggestionResult.  # noqa: E501

        The total number of related resources found.  # noqa: E501

        :return: The total of this SuggestionResult.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SuggestionResult.

        The total number of related resources found.  # noqa: E501

        :param total: The total of this SuggestionResult.  # noqa: E501
        :type: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def offset(self):
        """Gets the offset of this SuggestionResult.  # noqa: E501

        The offset of the returned resources. Supports paging where the 'offset' specifies the page number (zero-based numbering).  # noqa: E501

        :return: The offset of this SuggestionResult.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SuggestionResult.

        The offset of the returned resources. Supports paging where the 'offset' specifies the page number (zero-based numbering).  # noqa: E501

        :param offset: The offset of this SuggestionResult.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this SuggestionResult.  # noqa: E501

        The maximum number of returned resources. Supports paging where the 'limit' specifies the maximum page size  # noqa: E501

        :return: The limit of this SuggestionResult.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SuggestionResult.

        The maximum number of returned resources. Supports paging where the 'limit' specifies the maximum page size  # noqa: E501

        :param limit: The limit of this SuggestionResult.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def text(self):
        """Gets the text of this SuggestionResult.  # noqa: E501

        The text that was searched on.  # noqa: E501

        :return: The text of this SuggestionResult.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SuggestionResult.

        The text that was searched on.  # noqa: E501

        :param text: The text of this SuggestionResult.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def language(self):
        """Gets the language of this SuggestionResult.  # noqa: E501

        The language of the text that was searched on.  # noqa: E501

        :return: The language of this SuggestionResult.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SuggestionResult.

        The language of the text that was searched on.  # noqa: E501

        :param language: The language of this SuggestionResult.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def type(self):
        """Gets the type of this SuggestionResult.  # noqa: E501

        The class(es) of resources that was searched for.  # noqa: E501

        :return: The type of this SuggestionResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SuggestionResult.

        The class(es) of resources that was searched for.  # noqa: E501

        :param type: The type of this SuggestionResult.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def is_in_scheme(self):
        """Gets the is_in_scheme of this SuggestionResult.  # noqa: E501

        The concept scheme(s) that was searched through.  # noqa: E501

        :return: The is_in_scheme of this SuggestionResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._is_in_scheme

    @is_in_scheme.setter
    def is_in_scheme(self, is_in_scheme):
        """Sets the is_in_scheme of this SuggestionResult.

        The concept scheme(s) that was searched through.  # noqa: E501

        :param is_in_scheme: The is_in_scheme of this SuggestionResult.  # noqa: E501
        :type: list[str]
        """

        self._is_in_scheme = is_in_scheme

    @property
    def facet(self):
        """Gets the facet of this SuggestionResult.  # noqa: E501

        The counted facet(s)  # noqa: E501

        :return: The facet of this SuggestionResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._facet

    @facet.setter
    def facet(self, facet):
        """Sets the facet of this SuggestionResult.

        The counted facet(s)  # noqa: E501

        :param facet: The facet of this SuggestionResult.  # noqa: E501
        :type: list[str]
        """

        self._facet = facet

    @property
    def links(self):
        """Gets the links of this SuggestionResult.  # noqa: E501


        :return: The links of this SuggestionResult.  # noqa: E501
        :rtype: SuggestionResultLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SuggestionResult.


        :param links: The links of this SuggestionResult.  # noqa: E501
        :type: SuggestionResultLinks
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this SuggestionResult.  # noqa: E501


        :return: The embedded of this SuggestionResult.  # noqa: E501
        :rtype: SuggestionResultEmbedded
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this SuggestionResult.


        :param embedded: The embedded of this SuggestionResult.  # noqa: E501
        :type: SuggestionResultEmbedded
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SuggestionResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuggestionResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
