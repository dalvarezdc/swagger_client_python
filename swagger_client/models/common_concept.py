# coding: utf-8

"""
    ESCO REST API Docs

    The ESCO REST API exposes ESCO as a simple, RESTful API.<br /><br /> <a href=\"esco-api-openapi-v3.yml\">Open API v3 definition</a>  # noqa: E501

    OpenAPI spec version: 1.0.12
    Contact: EMPL-ESCO-SECRETARIAT@ec.europa.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_concept import BaseConcept  # noqa: F401,E501

class CommonConcept(BaseConcept):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reference_language': 'list[str]',
        'description': 'dict(str, TextNode)',
        'definition': 'dict(str, TextNode)',
        'scope_note': 'dict(str, TextNode)',
        'status': 'str',
        'links': 'CommonConceptLinks',
        'embedded': 'CommonConceptEmbedded'
    }
    if hasattr(BaseConcept, "swagger_types"):
        swagger_types.update(BaseConcept.swagger_types)

    attribute_map = {
        'reference_language': 'referenceLanguage',
        'description': 'description',
        'definition': 'definition',
        'scope_note': 'scopeNote',
        'status': 'status',
        'links': '_links',
        'embedded': '_embedded'
    }
    if hasattr(BaseConcept, "attribute_map"):
        attribute_map.update(BaseConcept.attribute_map)

    def __init__(self, reference_language=None, description=None, definition=None, scope_note=None, status=None, links=None, embedded=None, *args, **kwargs):  # noqa: E501
        """CommonConcept - a model defined in Swagger"""  # noqa: E501
        self._reference_language = None
        self._description = None
        self._definition = None
        self._scope_note = None
        self._status = None
        self._links = None
        self._embedded = None
        self.discriminator = None
        self.reference_language = reference_language
        if description is not None:
            self.description = description
        if definition is not None:
            self.definition = definition
        if scope_note is not None:
            self.scope_note = scope_note
        self.status = status
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded
        BaseConcept.__init__(self, *args, **kwargs)

    @property
    def reference_language(self):
        """Gets the reference_language of this CommonConcept.  # noqa: E501

        The reference language is the default language in which the information about the occupation is provided. The value of this field is an array containing ISO 639-1 two-letter language codes.  # noqa: E501

        :return: The reference_language of this CommonConcept.  # noqa: E501
        :rtype: list[str]
        """
        return self._reference_language

    @reference_language.setter
    def reference_language(self, reference_language):
        """Sets the reference_language of this CommonConcept.

        The reference language is the default language in which the information about the occupation is provided. The value of this field is an array containing ISO 639-1 two-letter language codes.  # noqa: E501

        :param reference_language: The reference_language of this CommonConcept.  # noqa: E501
        :type: list[str]
        """
        if reference_language is None:
            raise ValueError("Invalid value for `reference_language`, must not be `None`")  # noqa: E501

        self._reference_language = reference_language

    @property
    def description(self):
        """Gets the description of this CommonConcept.  # noqa: E501

        The description of the concept. The value of this field is a map containing Text Nodes indexed by language.  # noqa: E501

        :return: The description of this CommonConcept.  # noqa: E501
        :rtype: dict(str, TextNode)
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CommonConcept.

        The description of the concept. The value of this field is a map containing Text Nodes indexed by language.  # noqa: E501

        :param description: The description of this CommonConcept.  # noqa: E501
        :type: dict(str, TextNode)
        """

        self._description = description

    @property
    def definition(self):
        """Gets the definition of this CommonConcept.  # noqa: E501

        An abstract description of the concept. The value of this field is a map containing Text Nodes indexed by language.  # noqa: E501

        :return: The definition of this CommonConcept.  # noqa: E501
        :rtype: dict(str, TextNode)
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this CommonConcept.

        An abstract description of the concept. The value of this field is a map containing Text Nodes indexed by language.  # noqa: E501

        :param definition: The definition of this CommonConcept.  # noqa: E501
        :type: dict(str, TextNode)
        """

        self._definition = definition

    @property
    def scope_note(self):
        """Gets the scope_note of this CommonConcept.  # noqa: E501

        A scope note about the concept. The value of this field is a map containing Text Nodes indexed by language.  # noqa: E501

        :return: The scope_note of this CommonConcept.  # noqa: E501
        :rtype: dict(str, TextNode)
        """
        return self._scope_note

    @scope_note.setter
    def scope_note(self, scope_note):
        """Sets the scope_note of this CommonConcept.

        A scope note about the concept. The value of this field is a map containing Text Nodes indexed by language.  # noqa: E501

        :param scope_note: The scope_note of this CommonConcept.  # noqa: E501
        :type: dict(str, TextNode)
        """

        self._scope_note = scope_note

    @property
    def status(self):
        """Gets the status of this CommonConcept.  # noqa: E501

        The publication status of the concept. The value of this field is a string indicating the publication status.  # noqa: E501

        :return: The status of this CommonConcept.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CommonConcept.

        The publication status of the concept. The value of this field is a string indicating the publication status.  # noqa: E501

        :param status: The status of this CommonConcept.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def links(self):
        """Gets the links of this CommonConcept.  # noqa: E501


        :return: The links of this CommonConcept.  # noqa: E501
        :rtype: CommonConceptLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CommonConcept.


        :param links: The links of this CommonConcept.  # noqa: E501
        :type: CommonConceptLinks
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this CommonConcept.  # noqa: E501


        :return: The embedded of this CommonConcept.  # noqa: E501
        :rtype: CommonConceptEmbedded
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this CommonConcept.


        :param embedded: The embedded of this CommonConcept.  # noqa: E501
        :type: CommonConceptEmbedded
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonConcept, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonConcept):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
