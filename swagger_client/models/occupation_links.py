# coding: utf-8

"""
    ESCO REST API Docs

    The ESCO REST API exposes ESCO as a simple, RESTful API.<br /><br /> <a href=\"esco-api-openapi-v3.yml\">Open API v3 definition</a>  # noqa: E501

    OpenAPI spec version: 1.0.12
    Contact: EMPL-ESCO-SECRETARIAT@ec.europa.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OccupationLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'isco_unit_group': 'list[Link]',
        'regulated_profession_note': 'list[Link]',
        'broader_isco_group': 'list[Link]',
        'broader_occupation': 'list[Link]',
        'narrower_occupation': 'list[Link]'
    }

    attribute_map = {
        'isco_unit_group': 'iscoUnitGroup',
        'regulated_profession_note': 'regulatedProfessionNote',
        'broader_isco_group': 'broaderIscoGroup',
        'broader_occupation': 'broaderOccupation',
        'narrower_occupation': 'narrowerOccupation'
    }

    def __init__(self, isco_unit_group=None, regulated_profession_note=None, broader_isco_group=None, broader_occupation=None, narrower_occupation=None):  # noqa: E501
        """OccupationLinks - a model defined in Swagger"""  # noqa: E501
        self._isco_unit_group = None
        self._regulated_profession_note = None
        self._broader_isco_group = None
        self._broader_occupation = None
        self._narrower_occupation = None
        self.discriminator = None
        if isco_unit_group is not None:
            self.isco_unit_group = isco_unit_group
        if regulated_profession_note is not None:
            self.regulated_profession_note = regulated_profession_note
        if broader_isco_group is not None:
            self.broader_isco_group = broader_isco_group
        if broader_occupation is not None:
            self.broader_occupation = broader_occupation
        if narrower_occupation is not None:
            self.narrower_occupation = narrower_occupation

    @property
    def isco_unit_group(self):
        """Gets the isco_unit_group of this OccupationLinks.  # noqa: E501

        The preferred ISCO unit group. The value of this field is a Link to a Concept resource representing the ISCO unit group.  # noqa: E501

        :return: The isco_unit_group of this OccupationLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._isco_unit_group

    @isco_unit_group.setter
    def isco_unit_group(self, isco_unit_group):
        """Sets the isco_unit_group of this OccupationLinks.

        The preferred ISCO unit group. The value of this field is a Link to a Concept resource representing the ISCO unit group.  # noqa: E501

        :param isco_unit_group: The isco_unit_group of this OccupationLinks.  # noqa: E501
        :type: list[Link]
        """

        self._isco_unit_group = isco_unit_group

    @property
    def regulated_profession_note(self):
        """Gets the regulated_profession_note of this OccupationLinks.  # noqa: E501


        :return: The regulated_profession_note of this OccupationLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._regulated_profession_note

    @regulated_profession_note.setter
    def regulated_profession_note(self, regulated_profession_note):
        """Sets the regulated_profession_note of this OccupationLinks.


        :param regulated_profession_note: The regulated_profession_note of this OccupationLinks.  # noqa: E501
        :type: list[Link]
        """

        self._regulated_profession_note = regulated_profession_note

    @property
    def broader_isco_group(self):
        """Gets the broader_isco_group of this OccupationLinks.  # noqa: E501

        A broader related ISCO unit group. The value of this field is an array containing Links to Concept resources representing the broader ISCO unit groups.  # noqa: E501

        :return: The broader_isco_group of this OccupationLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._broader_isco_group

    @broader_isco_group.setter
    def broader_isco_group(self, broader_isco_group):
        """Sets the broader_isco_group of this OccupationLinks.

        A broader related ISCO unit group. The value of this field is an array containing Links to Concept resources representing the broader ISCO unit groups.  # noqa: E501

        :param broader_isco_group: The broader_isco_group of this OccupationLinks.  # noqa: E501
        :type: list[Link]
        """

        self._broader_isco_group = broader_isco_group

    @property
    def broader_occupation(self):
        """Gets the broader_occupation of this OccupationLinks.  # noqa: E501

        A broader related occupation. The value of this field is an array containing Links to broader Occupation resources.  # noqa: E501

        :return: The broader_occupation of this OccupationLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._broader_occupation

    @broader_occupation.setter
    def broader_occupation(self, broader_occupation):
        """Sets the broader_occupation of this OccupationLinks.

        A broader related occupation. The value of this field is an array containing Links to broader Occupation resources.  # noqa: E501

        :param broader_occupation: The broader_occupation of this OccupationLinks.  # noqa: E501
        :type: list[Link]
        """

        self._broader_occupation = broader_occupation

    @property
    def narrower_occupation(self):
        """Gets the narrower_occupation of this OccupationLinks.  # noqa: E501

        A narrower related occupation. The value of this field is an array containing Links to narrower Occupation resources.  # noqa: E501

        :return: The narrower_occupation of this OccupationLinks.  # noqa: E501
        :rtype: list[Link]
        """
        return self._narrower_occupation

    @narrower_occupation.setter
    def narrower_occupation(self, narrower_occupation):
        """Sets the narrower_occupation of this OccupationLinks.

        A narrower related occupation. The value of this field is an array containing Links to narrower Occupation resources.  # noqa: E501

        :param narrower_occupation: The narrower_occupation of this OccupationLinks.  # noqa: E501
        :type: list[Link]
        """

        self._narrower_occupation = narrower_occupation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OccupationLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OccupationLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
