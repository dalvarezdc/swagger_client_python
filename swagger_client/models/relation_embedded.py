# coding: utf-8

"""
    ESCO REST API Docs

    The ESCO REST API exposes ESCO as a simple, RESTful API.<br /><br /> <a href=\"esco-api-openapi-v3.yml\">Open API v3 definition</a>  # noqa: E501

    OpenAPI spec version: 1.0.12
    Contact: EMPL-ESCO-SECRETARIAT@ec.europa.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RelationEmbedded(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_top_concept': 'list[Concept]'
    }

    attribute_map = {
        'has_top_concept': 'hasTopConcept'
    }

    def __init__(self, has_top_concept=None):  # noqa: E501
        """RelationEmbedded - a model defined in Swagger"""  # noqa: E501
        self._has_top_concept = None
        self.discriminator = None
        if has_top_concept is not None:
            self.has_top_concept = has_top_concept

    @property
    def has_top_concept(self):
        """Gets the has_top_concept of this RelationEmbedded.  # noqa: E501

        The actual set of related resources for the given relation (e.g. 'hasTopConcept') . The value of this field is an array containing the JSON Object representations of each related resource in the result set  # noqa: E501

        :return: The has_top_concept of this RelationEmbedded.  # noqa: E501
        :rtype: list[Concept]
        """
        return self._has_top_concept

    @has_top_concept.setter
    def has_top_concept(self, has_top_concept):
        """Sets the has_top_concept of this RelationEmbedded.

        The actual set of related resources for the given relation (e.g. 'hasTopConcept') . The value of this field is an array containing the JSON Object representations of each related resource in the result set  # noqa: E501

        :param has_top_concept: The has_top_concept of this RelationEmbedded.  # noqa: E501
        :type: list[Concept]
        """

        self._has_top_concept = has_top_concept

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RelationEmbedded, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelationEmbedded):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
