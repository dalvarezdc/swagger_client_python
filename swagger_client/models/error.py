# coding: utf-8

"""
    ESCO REST API Docs

    The ESCO REST API exposes ESCO as a simple, RESTful API.<br /><br /> <a href=\"esco-api-openapi-v3.yml\">Open API v3 definition</a>  # noqa: E501

    OpenAPI spec version: 1.0.12
    Contact: EMPL-ESCO-SECRETARIAT@ec.europa.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Error(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logref': 'str',
        'status': 'int',
        'message': 'str',
        'links': 'AllOfErrorLinks'
    }

    attribute_map = {
        'logref': 'logref',
        'status': 'status',
        'message': 'message',
        'links': '_links'
    }

    def __init__(self, logref=None, status=None, message=None, links=None):  # noqa: E501
        """Error - a model defined in Swagger"""  # noqa: E501
        self._logref = None
        self._status = None
        self._message = None
        self._links = None
        self.discriminator = None
        self.logref = logref
        self.status = status
        self.message = message
        if links is not None:
            self.links = links

    @property
    def logref(self):
        """Gets the logref of this Error.  # noqa: E501

        Log ref  # noqa: E501

        :return: The logref of this Error.  # noqa: E501
        :rtype: str
        """
        return self._logref

    @logref.setter
    def logref(self, logref):
        """Sets the logref of this Error.

        Log ref  # noqa: E501

        :param logref: The logref of this Error.  # noqa: E501
        :type: str
        """
        if logref is None:
            raise ValueError("Invalid value for `logref`, must not be `None`")  # noqa: E501

        self._logref = logref

    @property
    def status(self):
        """Gets the status of this Error.  # noqa: E501

        The HTTP status code applicable to this problem.  # noqa: E501

        :return: The status of this Error.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Error.

        The HTTP status code applicable to this problem.  # noqa: E501

        :param status: The status of this Error.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def message(self):
        """Gets the message of this Error.  # noqa: E501

        Summary of the problem.  # noqa: E501

        :return: The message of this Error.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        Summary of the problem.  # noqa: E501

        :param message: The message of this Error.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def links(self):
        """Gets the links of this Error.  # noqa: E501


        :return: The links of this Error.  # noqa: E501
        :rtype: AllOfErrorLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Error.


        :param links: The links of this Error.  # noqa: E501
        :type: AllOfErrorLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Error, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Error):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
