# coding: utf-8

"""
    ESCO REST API Docs

    The ESCO REST API exposes ESCO as a simple, RESTful API.<br /><br /> <a href=\"esco-api-openapi-v3.yml\">Open API v3 definition</a>  # noqa: E501

    OpenAPI spec version: 1.0.12
    Contact: EMPL-ESCO-SECRETARIAT@ec.europa.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.common_concept import CommonConcept  # noqa: F401,E501

class Occupation(CommonConcept):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'preferred_term': 'dict(str, Term)',
        'alternative_terms': 'dict(str, Term)',
        'code': 'str',
        'codes': 'dict(str, Code)',
        'links': 'OccupationLinks'
    }
    if hasattr(CommonConcept, "swagger_types"):
        swagger_types.update(CommonConcept.swagger_types)

    attribute_map = {
        'preferred_term': 'preferredTerm',
        'alternative_terms': 'alternativeTerms',
        'code': 'code',
        'codes': 'codes',
        'links': '_links'
    }
    if hasattr(CommonConcept, "attribute_map"):
        attribute_map.update(CommonConcept.attribute_map)

    def __init__(self, preferred_term=None, alternative_terms=None, code=None, codes=None, links=None, *args, **kwargs):  # noqa: E501
        """Occupation - a model defined in Swagger"""  # noqa: E501
        self._preferred_term = None
        self._alternative_terms = None
        self._code = None
        self._codes = None
        self._links = None
        self.discriminator = None
        if preferred_term is not None:
            self.preferred_term = preferred_term
        if alternative_terms is not None:
            self.alternative_terms = alternative_terms
        if code is not None:
            self.code = code
        if codes is not None:
            self.codes = codes
        if links is not None:
            self.links = links
        CommonConcept.__init__(self, *args, **kwargs)

    @property
    def preferred_term(self):
        """Gets the preferred_term of this Occupation.  # noqa: E501

        The preferred term of the concept. A preferred label mapped to it’s associated gender roles.  # noqa: E501

        :return: The preferred_term of this Occupation.  # noqa: E501
        :rtype: dict(str, Term)
        """
        return self._preferred_term

    @preferred_term.setter
    def preferred_term(self, preferred_term):
        """Sets the preferred_term of this Occupation.

        The preferred term of the concept. A preferred label mapped to it’s associated gender roles.  # noqa: E501

        :param preferred_term: The preferred_term of this Occupation.  # noqa: E501
        :type: dict(str, Term)
        """

        self._preferred_term = preferred_term

    @property
    def alternative_terms(self):
        """Gets the alternative_terms of this Occupation.  # noqa: E501

        An alternative term of the concept. A alternative label mapped to it’s associated gender roles.  # noqa: E501

        :return: The alternative_terms of this Occupation.  # noqa: E501
        :rtype: dict(str, Term)
        """
        return self._alternative_terms

    @alternative_terms.setter
    def alternative_terms(self, alternative_terms):
        """Sets the alternative_terms of this Occupation.

        An alternative term of the concept. A alternative label mapped to it’s associated gender roles.  # noqa: E501

        :param alternative_terms: The alternative_terms of this Occupation.  # noqa: E501
        :type: dict(str, Term)
        """

        self._alternative_terms = alternative_terms

    @property
    def code(self):
        """Gets the code of this Occupation.  # noqa: E501

        The default code for the concept. The value of this field is a string indicating the default code.  # noqa: E501

        :return: The code of this Occupation.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Occupation.

        The default code for the concept. The value of this field is a string indicating the default code.  # noqa: E501

        :param code: The code of this Occupation.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def codes(self):
        """Gets the codes of this Occupation.  # noqa: E501

        The used codes for the concept. The value of this field is an array containing Codes.  # noqa: E501

        :return: The codes of this Occupation.  # noqa: E501
        :rtype: dict(str, Code)
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this Occupation.

        The used codes for the concept. The value of this field is an array containing Codes.  # noqa: E501

        :param codes: The codes of this Occupation.  # noqa: E501
        :type: dict(str, Code)
        """

        self._codes = codes

    @property
    def links(self):
        """Gets the links of this Occupation.  # noqa: E501


        :return: The links of this Occupation.  # noqa: E501
        :rtype: OccupationLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Occupation.


        :param links: The links of this Occupation.  # noqa: E501
        :type: OccupationLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Occupation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Occupation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
