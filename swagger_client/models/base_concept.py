# coding: utf-8

"""
    ESCO REST API Docs

    The ESCO REST API exposes ESCO as a simple, RESTful API.<br /><br /> <a href=\"esco-api-openapi-v3.yml\">Open API v3 definition</a>  # noqa: E501

    OpenAPI spec version: 1.0.12
    Contact: EMPL-ESCO-SECRETARIAT@ec.europa.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.resource import Resource  # noqa: F401,E501

class BaseConcept(Resource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class_name': 'str',
        'class_id': 'str',
        'uri': 'str',
        'preferred_label': 'dict(str, str)',
        'alternative_label': 'dict(str, str)'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        'class_name': 'className',
        'class_id': 'classId',
        'uri': 'uri',
        'preferred_label': 'preferredLabel',
        'alternative_label': 'alternativeLabel'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, class_name=None, class_id=None, uri=None, preferred_label=None, alternative_label=None, *args, **kwargs):  # noqa: E501
        """BaseConcept - a model defined in Swagger"""  # noqa: E501
        self._class_name = None
        self._class_id = None
        self._uri = None
        self._preferred_label = None
        self._alternative_label = None
        self.discriminator = None
        self.class_name = class_name
        self.class_id = class_id
        self.uri = uri
        self.preferred_label = preferred_label
        if alternative_label is not None:
            self.alternative_label = alternative_label
        Resource.__init__(self, *args, **kwargs)

    @property
    def class_name(self):
        """Gets the class_name of this BaseConcept.  # noqa: E501

        The class name of the described resource  # noqa: E501

        :return: The class_name of this BaseConcept.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this BaseConcept.

        The class name of the described resource  # noqa: E501

        :param class_name: The class_name of this BaseConcept.  # noqa: E501
        :type: str
        """
        if class_name is None:
            raise ValueError("Invalid value for `class_name`, must not be `None`")  # noqa: E501

        self._class_name = class_name

    @property
    def class_id(self):
        """Gets the class_id of this BaseConcept.  # noqa: E501

        The class id of the described resource  # noqa: E501

        :return: The class_id of this BaseConcept.  # noqa: E501
        :rtype: str
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this BaseConcept.

        The class id of the described resource  # noqa: E501

        :param class_id: The class_id of this BaseConcept.  # noqa: E501
        :type: str
        """
        if class_id is None:
            raise ValueError("Invalid value for `class_id`, must not be `None`")  # noqa: E501

        self._class_id = class_id

    @property
    def uri(self):
        """Gets the uri of this BaseConcept.  # noqa: E501

        The uri of the resource. It is the unique and persistent identifier of the described resource.  # noqa: E501

        :return: The uri of this BaseConcept.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this BaseConcept.

        The uri of the resource. It is the unique and persistent identifier of the described resource.  # noqa: E501

        :param uri: The uri of this BaseConcept.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def preferred_label(self):
        """Gets the preferred_label of this BaseConcept.  # noqa: E501

        The title of the concept scheme. The value of this field is a map containing string literals indexed by language (i.e. the ISO 639 alpha-2 language code).  # noqa: E501

        :return: The preferred_label of this BaseConcept.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._preferred_label

    @preferred_label.setter
    def preferred_label(self, preferred_label):
        """Sets the preferred_label of this BaseConcept.

        The title of the concept scheme. The value of this field is a map containing string literals indexed by language (i.e. the ISO 639 alpha-2 language code).  # noqa: E501

        :param preferred_label: The preferred_label of this BaseConcept.  # noqa: E501
        :type: dict(str, str)
        """
        if preferred_label is None:
            raise ValueError("Invalid value for `preferred_label`, must not be `None`")  # noqa: E501

        self._preferred_label = preferred_label

    @property
    def alternative_label(self):
        """Gets the alternative_label of this BaseConcept.  # noqa: E501

        An alternative title of the concept scheme. The value of the field is a map containing arrays of string literals indexed by language (i.e. the ISO 639 alpha-2 language code).  # noqa: E501

        :return: The alternative_label of this BaseConcept.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._alternative_label

    @alternative_label.setter
    def alternative_label(self, alternative_label):
        """Sets the alternative_label of this BaseConcept.

        An alternative title of the concept scheme. The value of the field is a map containing arrays of string literals indexed by language (i.e. the ISO 639 alpha-2 language code).  # noqa: E501

        :param alternative_label: The alternative_label of this BaseConcept.  # noqa: E501
        :type: dict(str, str)
        """

        self._alternative_label = alternative_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseConcept, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseConcept):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
