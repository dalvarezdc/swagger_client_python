# coding: utf-8

"""
    ESCO REST API Docs

    The ESCO REST API exposes ESCO as a simple, RESTful API.<br /><br /> <a href=\"esco-api-openapi-v3.yml\">Open API v3 definition</a>  # noqa: E501

    OpenAPI spec version: 1.0.12
    Contact: EMPL-ESCO-SECRETARIAT@ec.europa.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BulkOperationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_concept_by_concept_scheme(self, is_in_scheme, **kwargs):  # noqa: E501
        """Get concepts - by Concept Scheme  # noqa: E501

        # Get a collection of resources of class Concept by the universal identifier (~ URI) of a Concept Scheme.  This service is a bulk operation on the Get concept service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_concept_by_concept_scheme(is_in_scheme, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str is_in_scheme: The unique identifier of the requested concept scheme. (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Concepts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_concept_by_concept_scheme_with_http_info(is_in_scheme, **kwargs)  # noqa: E501
        else:
            (data) = self.get_concept_by_concept_scheme_with_http_info(is_in_scheme, **kwargs)  # noqa: E501
            return data

    def get_concept_by_concept_scheme_with_http_info(self, is_in_scheme, **kwargs):  # noqa: E501
        """Get concepts - by Concept Scheme  # noqa: E501

        # Get a collection of resources of class Concept by the universal identifier (~ URI) of a Concept Scheme.  This service is a bulk operation on the Get concept service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_concept_by_concept_scheme_with_http_info(is_in_scheme, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str is_in_scheme: The unique identifier of the requested concept scheme. (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Concepts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_in_scheme', 'language', 'offset', 'limit', 'selected_version', 'view_obsolete', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_concept_by_concept_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_in_scheme' is set
        if ('is_in_scheme' not in params or
                params['is_in_scheme'] is None):
            raise ValueError("Missing the required parameter `is_in_scheme` when calling `get_concept_by_concept_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_in_scheme' in params:
            query_params.append(('isInScheme', params['is_in_scheme']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501
        if 'view_obsolete' in params:
            query_params.append(('viewObsolete', params['view_obsolete']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/__rm__3/resource/concept', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Concepts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_concept_by_uri(self, **kwargs):  # noqa: E501
        """Get concepts - by URIs  # noqa: E501

        # Get a collection of resources of class Concept by their universal identifiers (~ URIs).  This service is a bulk operation on the Get concept service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_concept_by_uri(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str curie: The prefix of the provided URIs as parameters. CURIE (or Compact URI) defines a generic, abbreviated syntax for expressing Uniform Resource Identifiers (URIs).
        :param list[str] uris: The array of unique identifiers of the requested resources or the array of the end of unique identifiers if CURIE is defined.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Concepts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_concept_by_uri_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_concept_by_uri_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_concept_by_uri_with_http_info(self, **kwargs):  # noqa: E501
        """Get concepts - by URIs  # noqa: E501

        # Get a collection of resources of class Concept by their universal identifiers (~ URIs).  This service is a bulk operation on the Get concept service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_concept_by_uri_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str curie: The prefix of the provided URIs as parameters. CURIE (or Compact URI) defines a generic, abbreviated syntax for expressing Uniform Resource Identifiers (URIs).
        :param list[str] uris: The array of unique identifiers of the requested resources or the array of the end of unique identifiers if CURIE is defined.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Concepts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curie', 'uris', 'language', 'selected_version', 'view_obsolete', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_concept_by_uri" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'curie' in params:
            query_params.append(('curie', params['curie']))  # noqa: E501
        if 'uris' in params:
            query_params.append(('uris', params['uris']))  # noqa: E501
            collection_formats['uris'] = 'multi'  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501
        if 'view_obsolete' in params:
            query_params.append(('viewObsolete', params['view_obsolete']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/__rm__2/resource/concept', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Concepts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_occupation_by_concept_scheme(self, is_in_scheme, **kwargs):  # noqa: E501
        """Get occupations - by Concept Scheme  # noqa: E501

        # Get a collection of resources of class Occupation by the universal identifier (~ URI) of a Concept Scheme.  This service is a bulk operation on the Get occupation service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_occupation_by_concept_scheme(is_in_scheme, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str is_in_scheme: The unique identifier of the requested concept scheme. (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Occupations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_occupation_by_concept_scheme_with_http_info(is_in_scheme, **kwargs)  # noqa: E501
        else:
            (data) = self.get_occupation_by_concept_scheme_with_http_info(is_in_scheme, **kwargs)  # noqa: E501
            return data

    def get_occupation_by_concept_scheme_with_http_info(self, is_in_scheme, **kwargs):  # noqa: E501
        """Get occupations - by Concept Scheme  # noqa: E501

        # Get a collection of resources of class Occupation by the universal identifier (~ URI) of a Concept Scheme.  This service is a bulk operation on the Get occupation service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_occupation_by_concept_scheme_with_http_info(is_in_scheme, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str is_in_scheme: The unique identifier of the requested concept scheme. (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Occupations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_in_scheme', 'language', 'offset', 'limit', 'selected_version', 'view_obsolete', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_occupation_by_concept_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_in_scheme' is set
        if ('is_in_scheme' not in params or
                params['is_in_scheme'] is None):
            raise ValueError("Missing the required parameter `is_in_scheme` when calling `get_occupation_by_concept_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_in_scheme' in params:
            query_params.append(('isInScheme', params['is_in_scheme']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501
        if 'view_obsolete' in params:
            query_params.append(('viewObsolete', params['view_obsolete']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/__rm__3/resource/occupation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Occupations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_occupation_by_uri(self, **kwargs):  # noqa: E501
        """Get occupations - by URIs  # noqa: E501

        # Get a collection of resources of class Occupation by their universal identifiers (~ URIs).  This service is a bulk operation on the Get occupation service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_occupation_by_uri(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str curie: The prefix of the provided URIs as parameters. CURIE (or Compact URI) defines a generic, abbreviated syntax for expressing Uniform Resource Identifiers (URIs).
        :param list[str] uris: The array of unique identifiers of the requested resources or the array of the end of unique identifiers if CURIE is defined.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Occupations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_occupation_by_uri_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_occupation_by_uri_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_occupation_by_uri_with_http_info(self, **kwargs):  # noqa: E501
        """Get occupations - by URIs  # noqa: E501

        # Get a collection of resources of class Occupation by their universal identifiers (~ URIs).  This service is a bulk operation on the Get occupation service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_occupation_by_uri_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str curie: The prefix of the provided URIs as parameters. CURIE (or Compact URI) defines a generic, abbreviated syntax for expressing Uniform Resource Identifiers (URIs).
        :param list[str] uris: The array of unique identifiers of the requested resources or the array of the end of unique identifiers if CURIE is defined.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Occupations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curie', 'uris', 'language', 'selected_version', 'view_obsolete', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_occupation_by_uri" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'curie' in params:
            query_params.append(('curie', params['curie']))  # noqa: E501
        if 'uris' in params:
            query_params.append(('uris', params['uris']))  # noqa: E501
            collection_formats['uris'] = 'multi'  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501
        if 'view_obsolete' in params:
            query_params.append(('viewObsolete', params['view_obsolete']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/__rm__2/resource/occupation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Occupations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_skill_by_concept_scheme(self, is_in_scheme, **kwargs):  # noqa: E501
        """Get skills - by Concept Scheme  # noqa: E501

        # Get a collection of resources of class Skill by the universal identifier (~ URI) of a Concept Scheme.  This service is a bulk operation on the Get skill service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_skill_by_concept_scheme(is_in_scheme, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str is_in_scheme: The unique identifier of the requested concept scheme. (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Skills
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_skill_by_concept_scheme_with_http_info(is_in_scheme, **kwargs)  # noqa: E501
        else:
            (data) = self.get_skill_by_concept_scheme_with_http_info(is_in_scheme, **kwargs)  # noqa: E501
            return data

    def get_skill_by_concept_scheme_with_http_info(self, is_in_scheme, **kwargs):  # noqa: E501
        """Get skills - by Concept Scheme  # noqa: E501

        # Get a collection of resources of class Skill by the universal identifier (~ URI) of a Concept Scheme.  This service is a bulk operation on the Get skill service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_skill_by_concept_scheme_with_http_info(is_in_scheme, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str is_in_scheme: The unique identifier of the requested concept scheme. (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Skills
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_in_scheme', 'language', 'offset', 'limit', 'selected_version', 'view_obsolete', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_skill_by_concept_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_in_scheme' is set
        if ('is_in_scheme' not in params or
                params['is_in_scheme'] is None):
            raise ValueError("Missing the required parameter `is_in_scheme` when calling `get_skill_by_concept_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_in_scheme' in params:
            query_params.append(('isInScheme', params['is_in_scheme']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501
        if 'view_obsolete' in params:
            query_params.append(('viewObsolete', params['view_obsolete']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/__rm__3/resource/skill', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Skills',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_skill_by_uri(self, **kwargs):  # noqa: E501
        """Get skills - by URIs  # noqa: E501

        # Get a collection of resources of class Skill by their universal identifiers (~ URIs).  This service is a bulk operation on the Get skill service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_skill_by_uri(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str curie: The prefix of the provided URIs as parameters. CURIE (or Compact URI) defines a generic, abbreviated syntax for expressing Uniform Resource Identifiers (URIs).
        :param list[str] uris: The array of unique identifiers of the requested resources or the array of the end of unique identifiers if CURIE is defined.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Skills
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_skill_by_uri_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_skill_by_uri_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_skill_by_uri_with_http_info(self, **kwargs):  # noqa: E501
        """Get skills - by URIs  # noqa: E501

        # Get a collection of resources of class Skill by their universal identifiers (~ URIs).  This service is a bulk operation on the Get skill service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_skill_by_uri_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str curie: The prefix of the provided URIs as parameters. CURIE (or Compact URI) defines a generic, abbreviated syntax for expressing Uniform Resource Identifiers (URIs).
        :param list[str] uris: The array of unique identifiers of the requested resources or the array of the end of unique identifiers if CURIE is defined.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Skills
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curie', 'uris', 'language', 'selected_version', 'view_obsolete', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_skill_by_uri" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'curie' in params:
            query_params.append(('curie', params['curie']))  # noqa: E501
        if 'uris' in params:
            query_params.append(('uris', params['uris']))  # noqa: E501
            collection_formats['uris'] = 'multi'  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501
        if 'view_obsolete' in params:
            query_params.append(('viewObsolete', params['view_obsolete']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/__rm__2/resource/skill', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Skills',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_taxonomy_by_uri(self, **kwargs):  # noqa: E501
        """Get concept schemes - by URIs  # noqa: E501

        # Get a collection of resources of class Taxonomy (~ a concept scheme) by their universal identifiers (~ URIs).  This service can be used as entry point for hierarchical display of ESCO resources. The returned Taxonomy resources include links to the top level concepts within the concept hierarchy of the concept scheme.  This service is a bulk operation on the Get concept scheme service.  **When curie parameter is defined then all the values in the uris list are prefixed by the CURIE value automatically and the twovalues together should provide real URIs of resources.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taxonomy_by_uri(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str curie: The prefix of the provided URIs as parameters. CURIE (or Compact URI) defines a generic, abbreviated syntax for expressing Uniform Resource Identifiers (URIs).
        :param list[str] uris: The array of unique identifiers of the requested resources or the array of the end of unique identifiers if CURIE is defined.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Taxonomies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_taxonomy_by_uri_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_taxonomy_by_uri_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_taxonomy_by_uri_with_http_info(self, **kwargs):  # noqa: E501
        """Get concept schemes - by URIs  # noqa: E501

        # Get a collection of resources of class Taxonomy (~ a concept scheme) by their universal identifiers (~ URIs).  This service can be used as entry point for hierarchical display of ESCO resources. The returned Taxonomy resources include links to the top level concepts within the concept hierarchy of the concept scheme.  This service is a bulk operation on the Get concept scheme service.  **When curie parameter is defined then all the values in the uris list are prefixed by the CURIE value automatically and the twovalues together should provide real URIs of resources.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taxonomy_by_uri_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str curie: The prefix of the provided URIs as parameters. CURIE (or Compact URI) defines a generic, abbreviated syntax for expressing Uniform Resource Identifiers (URIs).
        :param list[str] uris: The array of unique identifiers of the requested resources or the array of the end of unique identifiers if CURIE is defined.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Taxonomies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curie', 'uris', 'language', 'selected_version', 'view_obsolete', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taxonomy_by_uri" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'curie' in params:
            query_params.append(('curie', params['curie']))  # noqa: E501
        if 'uris' in params:
            query_params.append(('uris', params['uris']))  # noqa: E501
            collection_formats['uris'] = 'multi'  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501
        if 'view_obsolete' in params:
            query_params.append(('viewObsolete', params['view_obsolete']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/__rm__2/resource/taxonomy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Taxonomies',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_related_get(self, uri, relation, **kwargs):  # noqa: E501
        """Get related resources  # noqa: E501

        # Get the related resources of a given resource by a given relation.  By default a partial JSON Object representation of each related resource (~ a fragment) is returned. Passing the parameter 'full=true', will return a full JSON Object representation of each resource but this implies a higher response time.  **Remark**: For concept resources (classes Occupation, Skill, Concept) an additional relation hasBroaderTransitive is supported  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_related_get(uri, relation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str relation: The relation to get the related resources for. Must be a known relation of the class the resource belongs to. (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param bool full: If set to 'true' the full 'HAL' Object representation of each related resource is returned.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Relation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resource_related_get_with_http_info(uri, relation, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_related_get_with_http_info(uri, relation, **kwargs)  # noqa: E501
            return data

    def resource_related_get_with_http_info(self, uri, relation, **kwargs):  # noqa: E501
        """Get related resources  # noqa: E501

        # Get the related resources of a given resource by a given relation.  By default a partial JSON Object representation of each related resource (~ a fragment) is returned. Passing the parameter 'full=true', will return a full JSON Object representation of each resource but this implies a higher response time.  **Remark**: For concept resources (classes Occupation, Skill, Concept) an additional relation hasBroaderTransitive is supported  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_related_get_with_http_info(uri, relation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str relation: The relation to get the related resources for. Must be a known relation of the class the resource belongs to. (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param bool full: If set to 'true' the full 'HAL' Object representation of each related resource is returned.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Relation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'relation', 'language', 'offset', 'limit', 'full', 'selected_version', 'view_obsolete', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_related_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `resource_related_get`")  # noqa: E501
        # verify the required parameter 'relation' is set
        if ('relation' not in params or
                params['relation'] is None):
            raise ValueError("Missing the required parameter `relation` when calling `resource_related_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'full' in params:
            query_params.append(('full', params['full']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501
        if 'view_obsolete' in params:
            query_params.append(('viewObsolete', params['view_obsolete']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/resource/related', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Relation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
