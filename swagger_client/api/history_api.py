# coding: utf-8

"""
    ESCO REST API Docs

    The ESCO REST API exposes ESCO as a simple, RESTful API.<br /><br /> <a href=\"esco-api-openapi-v3.yml\">Open API v3 definition</a>  # noqa: E501

    OpenAPI spec version: 1.0.12
    Contact: EMPL-ESCO-SECRETARIAT@ec.europa.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class HistoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def conversion_concept_get(self, uri, **kwargs):  # noqa: E501
        """Get Converted Concept  # noqa: E501

        # Get a collection of converted resources of class Concept by the universal identifier (~ URI) in the target esco version.  This endpoints finds the state of a given concept on the specified ESCO version. It may return with a collection of concepts if the searched concept was split into more on the expected version.  In order to reconstruct how a concept was split and merged the isReplacedByTransitive relation can be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversion_concept_get(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str target_esco_version: The target esco version for the converted resource
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Concepts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.conversion_concept_get_with_http_info(uri, **kwargs)  # noqa: E501
        else:
            (data) = self.conversion_concept_get_with_http_info(uri, **kwargs)  # noqa: E501
            return data

    def conversion_concept_get_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get Converted Concept  # noqa: E501

        # Get a collection of converted resources of class Concept by the universal identifier (~ URI) in the target esco version.  This endpoints finds the state of a given concept on the specified ESCO version. It may return with a collection of concepts if the searched concept was split into more on the expected version.  In order to reconstruct how a concept was split and merged the isReplacedByTransitive relation can be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversion_concept_get_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str target_esco_version: The target esco version for the converted resource
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Concepts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'language', 'target_esco_version', 'offset', 'limit', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conversion_concept_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `conversion_concept_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'target_esco_version' in params:
            query_params.append(('targetEscoVersion', params['target_esco_version']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/conversion/concept', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Concepts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conversion_occupation_get(self, uri, **kwargs):  # noqa: E501
        """Get Converted Occupation  # noqa: E501

        # Get a collection of converted resources of class Occupation by the universal identifier (~ URI) in the target esco version.  This endpoints finds the state of a given concept on the specified ESCO version. It may return with a collection of concepts if the searched concept was split into more on the expected version.  In order to reconstruct how a concept was split and merged the isReplacedByTransitive relation can be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversion_occupation_get(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str target_esco_version: The target esco version for the converted resource
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Occupations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.conversion_occupation_get_with_http_info(uri, **kwargs)  # noqa: E501
        else:
            (data) = self.conversion_occupation_get_with_http_info(uri, **kwargs)  # noqa: E501
            return data

    def conversion_occupation_get_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get Converted Occupation  # noqa: E501

        # Get a collection of converted resources of class Occupation by the universal identifier (~ URI) in the target esco version.  This endpoints finds the state of a given concept on the specified ESCO version. It may return with a collection of concepts if the searched concept was split into more on the expected version.  In order to reconstruct how a concept was split and merged the isReplacedByTransitive relation can be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversion_occupation_get_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str target_esco_version: The target esco version for the converted resource
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Occupations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'language', 'target_esco_version', 'offset', 'limit', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conversion_occupation_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `conversion_occupation_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'target_esco_version' in params:
            query_params.append(('targetEscoVersion', params['target_esco_version']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/conversion/occupation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Occupations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conversion_skill_get(self, uri, **kwargs):  # noqa: E501
        """Get Converted Skill  # noqa: E501

        # Get a collection of converted resources of class Skill by the universal identifier (~ URI) in the target esco version.  This endpoints finds the state of a given concept on the specified ESCO version. It may return with a collection of concepts if the searched concept was split into more on the expected version.  In order to reconstruct how a concept was split and merged the isReplacedByTransitive relation can be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversion_skill_get(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str target_esco_version: The target esco version for the converted resource
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Skills
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.conversion_skill_get_with_http_info(uri, **kwargs)  # noqa: E501
        else:
            (data) = self.conversion_skill_get_with_http_info(uri, **kwargs)  # noqa: E501
            return data

    def conversion_skill_get_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get Converted Skill  # noqa: E501

        # Get a collection of converted resources of class Skill by the universal identifier (~ URI) in the target esco version.  This endpoints finds the state of a given concept on the specified ESCO version. It may return with a collection of concepts if the searched concept was split into more on the expected version.  In order to reconstruct how a concept was split and merged the isReplacedByTransitive relation can be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conversion_skill_get_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str target_esco_version: The target esco version for the converted resource
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Skills
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'language', 'target_esco_version', 'offset', 'limit', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conversion_skill_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `conversion_skill_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'target_esco_version' in params:
            query_params.append(('targetEscoVersion', params['target_esco_version']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/conversion/skill', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Skills',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def history_get(self, uri, **kwargs):  # noqa: E501
        """Get history  # noqa: E501

        # Get delta changes of the specified concepts between ESCO version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.history_get(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param bool full_history: If set to 'true' the full history will be returned for all ESCO versions.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.history_get_with_http_info(uri, **kwargs)  # noqa: E501
        else:
            (data) = self.history_get_with_http_info(uri, **kwargs)  # noqa: E501
            return data

    def history_get_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get history  # noqa: E501

        # Get delta changes of the specified concepts between ESCO version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.history_get_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param bool full_history: If set to 'true' the full history will be returned for all ESCO versions.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'language', 'full_history', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'full_history' in params:
            query_params.append(('fullHistory', params['full_history']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
