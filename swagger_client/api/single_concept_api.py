# coding: utf-8

"""
    ESCO REST API Docs

    The ESCO REST API exposes ESCO as a simple, RESTful API.<br /><br /> <a href=\"esco-api-openapi-v3.yml\">Open API v3 definition</a>  # noqa: E501

    OpenAPI spec version: 1.0.12
    Contact: EMPL-ESCO-SECRETARIAT@ec.europa.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SingleConceptApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def resource_concept_get(self, uri, **kwargs):  # noqa: E501
        """Get concept  # noqa: E501

        # Get a resource of class Concept by its universal identifier (~ a URI).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_concept_get(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Concept
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resource_concept_get_with_http_info(uri, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_concept_get_with_http_info(uri, **kwargs)  # noqa: E501
            return data

    def resource_concept_get_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get concept  # noqa: E501

        # Get a resource of class Concept by its universal identifier (~ a URI).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_concept_get_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Concept
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'language', 'selected_version', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_concept_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `resource_concept_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/resource/concept', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Concept',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_occupation_get(self, uri, **kwargs):  # noqa: E501
        """Get occupation  # noqa: E501

        # Get a resource of class Occupation by its universal identifier (~ a URI).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_occupation_get(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Occupation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resource_occupation_get_with_http_info(uri, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_occupation_get_with_http_info(uri, **kwargs)  # noqa: E501
            return data

    def resource_occupation_get_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get occupation  # noqa: E501

        # Get a resource of class Occupation by its universal identifier (~ a URI).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_occupation_get_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Occupation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'language', 'selected_version', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_occupation_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `resource_occupation_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/resource/occupation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Occupation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_skill_get(self, uri, **kwargs):  # noqa: E501
        """Get skill  # noqa: E501

        # Get a resource of class Skill by its universal identifier (~ a URI).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_skill_get(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Skill
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resource_skill_get_with_http_info(uri, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_skill_get_with_http_info(uri, **kwargs)  # noqa: E501
            return data

    def resource_skill_get_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get skill  # noqa: E501

        # Get a resource of class Skill by its universal identifier (~ a URI).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_skill_get_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Skill
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'language', 'selected_version', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_skill_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `resource_skill_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/resource/skill', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Skill',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_taxonomy_get(self, uri, **kwargs):  # noqa: E501
        """Get concept scheme  # noqa: E501

        # Get a resource of class Taxonomy (~ a concept scheme) by its universal identifier (~ a URI).  This service can be used as entry point for hierarchical display of ESCO resources. The returned Taxonomy resource includes links to the top level concepts within the concept hierarchy of the concept scheme.  ESCO organizes different 'kind' of concept resources in different concept schemes. Concepts come in compiled vocabularies, such as thesauri or classification schemes. Concepts might also be grouped or organised into collections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_taxonomy_get(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Taxonomy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resource_taxonomy_get_with_http_info(uri, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_taxonomy_get_with_http_info(uri, **kwargs)  # noqa: E501
            return data

    def resource_taxonomy_get_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get concept scheme  # noqa: E501

        # Get a resource of class Taxonomy (~ a concept scheme) by its universal identifier (~ a URI).  This service can be used as entry point for hierarchical display of ESCO resources. The returned Taxonomy resource includes links to the top level concepts within the concept hierarchy of the concept scheme.  ESCO organizes different 'kind' of concept resources in different concept schemes. Concepts come in compiled vocabularies, such as thesauri or classification schemes. Concepts might also be grouped or organised into collections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_taxonomy_get_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The unique identifier of the requested resource (required)
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param str selected_version: The selected ESCO dataset version.
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: Taxonomy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'language', 'selected_version', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_taxonomy_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `resource_taxonomy_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/resource/taxonomy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Taxonomy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
