# coding: utf-8

"""
    ESCO REST API Docs

    The ESCO REST API exposes ESCO as a simple, RESTful API.<br /><br /> <a href=\"esco-api-openapi-v3.yml\">Open API v3 definition</a>  # noqa: E501

    OpenAPI spec version: 1.0.12
    Contact: EMPL-ESCO-SECRETARIAT@ec.europa.eu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SearchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def search_get(self, full, **kwargs):  # noqa: E501
        """Full text search - complete mode  # noqa: E501

        # Get all resources of a given class matching a plain text in a given language.  This is a full text search on the preferred labels, the alternative labels, the hidden labels and the description of a resource. The search must be scoped on class type and language. The search result is paged.  Passing parameter full=true, will return a full JSON Object representation of each resource. This implies a higher response time compared to the full text search in quick mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_get(full, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool full: Set to 'true' to get the full 'HAL' Object representations of the returned resources. (required)
        :param str text: The text to search for. If omitted all returned resources in the response are ordered by preference label.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param list[str] type: The class of resources to search for. Filter parameter, the search is restricted to resources that belong to at least one of the given classes.
        :param list[str] is_in_scheme: The concept scheme to search for resources that are contained in it. Filter parameter, the search is restricted to resources that are contained in at least one of the given concept schemes.
        :param list[str] facet: The facet to count for. The reponse will return for each different value of the given facet the number of occurrences in the search result set. Supported facets are 'type' and/or 'isInScheme'
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_get_with_http_info(full, **kwargs)  # noqa: E501
        else:
            (data) = self.search_get_with_http_info(full, **kwargs)  # noqa: E501
            return data

    def search_get_with_http_info(self, full, **kwargs):  # noqa: E501
        """Full text search - complete mode  # noqa: E501

        # Get all resources of a given class matching a plain text in a given language.  This is a full text search on the preferred labels, the alternative labels, the hidden labels and the description of a resource. The search must be scoped on class type and language. The search result is paged.  Passing parameter full=true, will return a full JSON Object representation of each resource. This implies a higher response time compared to the full text search in quick mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_get_with_http_info(full, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool full: Set to 'true' to get the full 'HAL' Object representations of the returned resources. (required)
        :param str text: The text to search for. If omitted all returned resources in the response are ordered by preference label.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param list[str] type: The class of resources to search for. Filter parameter, the search is restricted to resources that belong to at least one of the given classes.
        :param list[str] is_in_scheme: The concept scheme to search for resources that are contained in it. Filter parameter, the search is restricted to resources that are contained in at least one of the given concept schemes.
        :param list[str] facet: The facet to count for. The reponse will return for each different value of the given facet the number of occurrences in the search result set. Supported facets are 'type' and/or 'isInScheme'
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['full', 'text', 'language', 'type', 'is_in_scheme', 'facet', 'offset', 'limit', 'selected_version', 'view_obsolete', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'full' is set
        if ('full' not in params or
                params['full'] is None):
            raise ValueError("Missing the required parameter `full` when calling `search_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
            collection_formats['type'] = 'multi'  # noqa: E501
        if 'is_in_scheme' in params:
            query_params.append(('isInScheme', params['is_in_scheme']))  # noqa: E501
            collection_formats['isInScheme'] = 'multi'  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
            collection_formats['facet'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'full' in params:
            query_params.append(('full', params['full']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501
        if 'view_obsolete' in params:
            query_params.append(('viewObsolete', params['view_obsolete']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_quick_mode(self, **kwargs):  # noqa: E501
        """Full text search - quick mode  # noqa: E501

        # Get all resources of a given class matching a plain text in a given language.  This is a full text search on the preferred labels, the alternative labels, the hidden labels and the description of a resource. The search must be scoped on class type and language. The search result is paged.  Passing parameter full=false (or omitting the parameter as false is the default value), will only return a partial JSON Object representation of each resource (~ a fragment). This implies a lower response time compared to the full text search in complete mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_quick_mode(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: The text to search for. If omitted all returned resources in the response are ordered by preference label.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param list[str] type: The class of resources to search for. Filter parameter, the search is restricted to resources that belong to at least one of the given classes.
        :param list[str] is_in_scheme: The concept scheme to search for resources that are contained in it. Filter parameter, the search is restricted to resources that are contained in at least one of the given concept schemes.
        :param list[str] facet: The facet to count for. The reponse will return for each different value of the given facet the number of occurrences in the search result set. Supported facets are 'type' and/or 'isInScheme'
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param bool full: If set to 'true' the full 'HAL' Object representation of each related resource is returned.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_quick_mode_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_quick_mode_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_quick_mode_with_http_info(self, **kwargs):  # noqa: E501
        """Full text search - quick mode  # noqa: E501

        # Get all resources of a given class matching a plain text in a given language.  This is a full text search on the preferred labels, the alternative labels, the hidden labels and the description of a resource. The search must be scoped on class type and language. The search result is paged.  Passing parameter full=false (or omitting the parameter as false is the default value), will only return a partial JSON Object representation of each resource (~ a fragment). This implies a lower response time compared to the full text search in complete mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_quick_mode_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: The text to search for. If omitted all returned resources in the response are ordered by preference label.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param list[str] type: The class of resources to search for. Filter parameter, the search is restricted to resources that belong to at least one of the given classes.
        :param list[str] is_in_scheme: The concept scheme to search for resources that are contained in it. Filter parameter, the search is restricted to resources that are contained in at least one of the given concept schemes.
        :param list[str] facet: The facet to count for. The reponse will return for each different value of the given facet the number of occurrences in the search result set. Supported facets are 'type' and/or 'isInScheme'
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param bool full: If set to 'true' the full 'HAL' Object representation of each related resource is returned.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text', 'language', 'type', 'is_in_scheme', 'facet', 'offset', 'limit', 'full', 'selected_version', 'view_obsolete', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_quick_mode" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
            collection_formats['type'] = 'multi'  # noqa: E501
        if 'is_in_scheme' in params:
            query_params.append(('isInScheme', params['is_in_scheme']))  # noqa: E501
            collection_formats['isInScheme'] = 'multi'  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
            collection_formats['facet'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'full' in params:
            query_params.append(('full', params['full']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501
        if 'view_obsolete' in params:
            query_params.append(('viewObsolete', params['view_obsolete']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/__rm__2/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suggest2_get(self, **kwargs):  # noqa: E501
        """Suggest2  # noqa: E501

        # Get all resources of a given class matching a label in a given language.  This is a full text search on the labels of a resource. The search must be scoped on language and optionally on class type. The search result is paged.  This service returns a partial JSON Object representation of each resource (~ a fragment). A typical use of this call is autocomplete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suggest2_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: The text to search for. If omitted all returned resources in the response are ordered by preference label.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param list[str] type: The class of resources to search for. Filter parameter, the search is restricted to resources that belong to at least one of the given classes.
        :param list[str] is_in_scheme: The concept scheme to search for resources that are contained in it. Filter parameter, the search is restricted to resources that are contained in at least one of the given concept schemes.
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param bool alt: If set to 'true' both preferred terms and alternative terms are searched
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: SuggestionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suggest2_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.suggest2_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def suggest2_get_with_http_info(self, **kwargs):  # noqa: E501
        """Suggest2  # noqa: E501

        # Get all resources of a given class matching a label in a given language.  This is a full text search on the labels of a resource. The search must be scoped on language and optionally on class type. The search result is paged.  This service returns a partial JSON Object representation of each resource (~ a fragment). A typical use of this call is autocomplete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suggest2_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: The text to search for. If omitted all returned resources in the response are ordered by preference label.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param list[str] type: The class of resources to search for. Filter parameter, the search is restricted to resources that belong to at least one of the given classes.
        :param list[str] is_in_scheme: The concept scheme to search for resources that are contained in it. Filter parameter, the search is restricted to resources that are contained in at least one of the given concept schemes.
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param bool alt: If set to 'true' both preferred terms and alternative terms are searched
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: SuggestionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text', 'language', 'type', 'is_in_scheme', 'offset', 'limit', 'alt', 'selected_version', 'view_obsolete', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suggest2_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
            collection_formats['type'] = 'multi'  # noqa: E501
        if 'is_in_scheme' in params:
            query_params.append(('isInScheme', params['is_in_scheme']))  # noqa: E501
            collection_formats['isInScheme'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'alt' in params:
            query_params.append(('alt', params['alt']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501
        if 'view_obsolete' in params:
            query_params.append(('viewObsolete', params['view_obsolete']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/suggest2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuggestionResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suggest_get(self, **kwargs):  # noqa: E501
        """Suggest  # noqa: E501

        # Get all resources of a given class matching a preferred label in a given language.  This is a full text search on the preferred label of a resource. The search must be scoped on class type and language. The search result is paged.  This service returns a partial JSON Object representation of each resource (~ a fragment). A typical use of this call is autocomplete.  This method is deprecated. Use instead a new implementation of the suggest service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suggest_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: The text to search for. If omitted all returned resources in the response are ordered by preference label.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param list[str] type: The class of resources to search for. Filter parameter, the search is restricted to resources that belong to at least one of the given classes.
        :param list[str] is_in_scheme: The concept scheme to search for resources that are contained in it. Filter parameter, the search is restricted to resources that are contained in at least one of the given concept schemes.
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: SuggestionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suggest_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.suggest_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def suggest_get_with_http_info(self, **kwargs):  # noqa: E501
        """Suggest  # noqa: E501

        # Get all resources of a given class matching a preferred label in a given language.  This is a full text search on the preferred label of a resource. The search must be scoped on class type and language. The search result is paged.  This service returns a partial JSON Object representation of each resource (~ a fragment). A typical use of this call is autocomplete.  This method is deprecated. Use instead a new implementation of the suggest service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suggest_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: The text to search for. If omitted all returned resources in the response are ordered by preference label.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param list[str] type: The class of resources to search for. Filter parameter, the search is restricted to resources that belong to at least one of the given classes.
        :param list[str] is_in_scheme: The concept scheme to search for resources that are contained in it. Filter parameter, the search is restricted to resources that are contained in at least one of the given concept schemes.
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: SuggestionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text', 'language', 'type', 'is_in_scheme', 'offset', 'limit', 'selected_version', 'view_obsolete', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suggest_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
            collection_formats['type'] = 'multi'  # noqa: E501
        if 'is_in_scheme' in params:
            query_params.append(('isInScheme', params['is_in_scheme']))  # noqa: E501
            collection_formats['isInScheme'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501
        if 'view_obsolete' in params:
            query_params.append(('viewObsolete', params['view_obsolete']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuggestionResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def terms_get(self, **kwargs):  # noqa: E501
        """Terms  # noqa: E501

        # Search for individual concept terms matching the given text and language.  This is a full text search. The search result is paged.  This service returns a partial JSON Object representation of each resource (~ a fragment). A typical use of this call is autocomplete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.terms_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: The text to search for. If omitted all returned resources in the response are ordered by preference label.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param list[str] type: The class of resources to search for. Filter parameter, the search is restricted to resources that belong to at least one of the given classes.
        :param list[str] is_in_scheme: The concept scheme to search for resources that are contained in it. Filter parameter, the search is restricted to resources that are contained in at least one of the given concept schemes.
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param list[str] has_label_type: The skos-xl property type linking the concept to the label, possible values: ['http://www.w3.org/2008/05/skos-xl#prefLabel', 'http://www.w3.org/2008/05/skos-xl#altLabel', 'http://www.w3.org/2008/05/skos-xl#hiddenLabel']
        :param list[str] has_label_role: Allows filtering on gender specific terms. Value must be the uri of an ESCO label gender role.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: TermResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.terms_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.terms_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def terms_get_with_http_info(self, **kwargs):  # noqa: E501
        """Terms  # noqa: E501

        # Search for individual concept terms matching the given text and language.  This is a full text search. The search result is paged.  This service returns a partial JSON Object representation of each resource (~ a fragment). A typical use of this call is autocomplete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.terms_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: The text to search for. If omitted all returned resources in the response are ordered by preference label.
        :param str language: The default language of the returned response. Overwrites the Accept-Language header.
        :param list[str] type: The class of resources to search for. Filter parameter, the search is restricted to resources that belong to at least one of the given classes.
        :param list[str] is_in_scheme: The concept scheme to search for resources that are contained in it. Filter parameter, the search is restricted to resources that are contained in at least one of the given concept schemes.
        :param int offset: The offset of the returned resources in the response. Supports paging where the 'offset' specifies the page number
        :param int limit: The maximum number of returned resources in the response.
        :param list[str] has_label_type: The skos-xl property type linking the concept to the label, possible values: ['http://www.w3.org/2008/05/skos-xl#prefLabel', 'http://www.w3.org/2008/05/skos-xl#altLabel', 'http://www.w3.org/2008/05/skos-xl#hiddenLabel']
        :param list[str] has_label_role: Allows filtering on gender specific terms. Value must be the uri of an ESCO label gender role.
        :param str selected_version: The selected ESCO dataset version.
        :param bool view_obsolete: If set to 'true', the obsoleted concepts will be returned
        :param str accept_language: The default language of the returned response. Optional and might be overwritten by the language request parameter.
        :return: TermResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text', 'language', 'type', 'is_in_scheme', 'offset', 'limit', 'has_label_type', 'has_label_role', 'selected_version', 'view_obsolete', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method terms_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
            collection_formats['type'] = 'multi'  # noqa: E501
        if 'is_in_scheme' in params:
            query_params.append(('isInScheme', params['is_in_scheme']))  # noqa: E501
            collection_formats['isInScheme'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'has_label_type' in params:
            query_params.append(('hasLabelType', params['has_label_type']))  # noqa: E501
            collection_formats['hasLabelType'] = 'multi'  # noqa: E501
        if 'has_label_role' in params:
            query_params.append(('hasLabelRole', params['has_label_role']))  # noqa: E501
            collection_formats['hasLabelRole'] = 'multi'  # noqa: E501
        if 'selected_version' in params:
            query_params.append(('selectedVersion', params['selected_version']))  # noqa: E501
        if 'view_obsolete' in params:
            query_params.append(('viewObsolete', params['view_obsolete']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/terms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TermResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
